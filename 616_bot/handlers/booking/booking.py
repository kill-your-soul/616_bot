from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards import (
    sound_engineers,
    keyboard_available_dates,
    keyboard_available_dates_inline,
    start_time_keyboard,
    start_time_night_keyboard,
    end_time_keyboard,
    end_time_keyboard_night,
    approvement_keyboard,
    pay_inline_keyboard,
)
from states.booking import Booking
from states.night_booking import NightBooking
from states.start import Start
from loguru import logger
from handlers.start.start import start_booking_handler
from database import write_booking, get_number, find_temp
from utils.sum import count_sum
from utils.date import determine_month
from typing import Dict, Any
import os
import json


@logger.catch()
async def menu_handler(message: Message, state: FSMContext):
    logger.debug(message.text)
    await state.update_data(service=message.text)
    
    keyboard = await sound_engineers()
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä–∞:\n\n"
        "<a href='https://vk.com/music/playlist/-171812248_1_ddeed634b65ab0a356'><b>VICEYY</b></a>\n"
        "–°—Ç–∞–∂: 6 –ª–µ—Ç\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–Ω—Ä—ã: hip-hop, new school rap, underground\n\n"
        "<a href='https://vk.com/music/playlist/-171812248_3_880334b157b3791d4a'><b>DIEZE</b></a>\n"
        "–°—Ç–∞–∂: 4 –≥–æ–¥–∞\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–Ω—Ä—ã: trap, r&b, techno\n\n"
        "<a href='https://vk.com/music/playlist/-171812248_2_a50dc5347aa81298cc'><b>AKSENIY</b></a>\n"
        "–°—Ç–∞–∂: 5 –ª–µ—Ç\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–Ω—Ä—ã: hip-hop, rock, underground\n\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <i>'–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è'</i>.",
        reply_markup=keyboard,
        parse_mode="html",
    )
    await state.set_state(Booking.engineer)


@logger.catch()
async def date_handler(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    keyboard = await keyboard_available_dates()
    logger.debug(data)
    logger.debug(f"service: {data.get('service', '')}")
    if data.get("service").lower() == "–∞—Ä–µ–Ω–¥–∞ —Å—Ç—É–¥–∏–∏ (–¥–µ–Ω—å)":
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:")
        await message.answer(
            "<i>–í –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏.</i>",
            reply_markup=keyboard,
            parse_mode="html",
            disable_notification=True
        )
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:")
        await message.answer(
            "<i>–í –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã —É –¥–∞–Ω–Ω–æ–≥–æ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏.</i>",
            reply_markup=keyboard,
            parse_mode="html",
            disable_notification=True
        )
    if data.get("service", "") == "–Ω–æ—á—å –Ω–∞ —Å—Ç—É–¥–∏–∏":
        await state.update_data(start_time="22:00")
        await state.update_data(end_time="6:00")
        await state.set_state(Booking.approvement)
        data = await state.get_data()
        logger.debug(f"night data: {data}")
        # await approvement_night_handler(message, state)
        await state.set_state(NightBooking.date)
        return
    await state.set_state(Booking.start_time)


@logger.catch()
async def engineer_handler(message: Message, state: FSMContext) -> None:
    # logger.debug(message.text)
    # await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {message.text}")
    logger.debug(f"{message.text}")
    # state
    await state.update_data(name_of_engineer=message.text)
    await date_handler(message, state)


@logger.catch()
async def start_time_handler(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    day: str = message.text
    await state.update_data(day=day)
    logger.debug(f"Chosen day: {day}")
    logger.debug(data)
    keyboard = await start_time_keyboard(day)
    if data["service"].lower() == "—á–∞—Å –Ω–∞ —Å—Ç—É–¥–∏–∏ (–Ω–æ—á—å)":
        keyboard = await start_time_night_keyboard(day)
    await message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏:")
    await message.answer(
        "<i>–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.</i>",
        reply_markup=keyboard,
        parse_mode="html",
        disable_notification=True
    )
    await state.set_state(Booking.end_time)


async def end_time_handler(message: Message, state: FSMContext) -> None:
    start_time = message.text
    await state.update_data(start_time=start_time)
    data = await state.get_data()
    # logger.debug(data)
    keyboard = await end_time_keyboard(data["day"], data["start_time"])
    if data["service"].lower() == "—á–∞—Å –Ω–∞ —Å—Ç—É–¥–∏–∏ (–Ω–æ—á—å)":
        keyboard = await end_time_keyboard_night(data["day"], data["start_time"])
    await message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:\n\n")
    await message.answer(
        "<i>–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç –∏ –¥–Ω–µ–≤–Ω–æ–π –∏ –Ω–æ—á–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫.</i>",
        reply_markup=keyboard,
        parse_mode="html",
        disable_notification=True
    )
    await state.set_state(Booking.approvement)


@logger.catch()
async def approvement_handler(message: Message, state: FSMContext) -> None:
    end_time = message.text
    await state.update_data(end_time=end_time)
    data = await state.get_data()
    keyboard = await approvement_keyboard()
    await state.set_state(Booking.end)
    # times: int = int(data["end_time"].split(":")[0]) - int(
    #     data["start_time"].split(":")[0]
    # )
    price = await count_sum(data["service"], data["start_time"], data["end_time"])
    await state.update_data(price=price)
    if data.get("service").lower() == "–∞—Ä–µ–Ω–¥–∞ —Å—Ç—É–¥–∏–∏ (–¥–µ–Ω—å)":
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {data['service']}\n"
            f"<b>–í—Ä–µ–º—è:</b> {data['start_time']} - {data['end_time']}\n"
            f"<b>–î–∞—Ç–∞:</b> {data['day']}.{str(determine_month(int(data['day']))).zfill(2)}\n"
            f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b> {price}\n\n"
            f'–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –∂–º–∏ "<i>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</i>"',
            reply_markup=keyboard,
            parse_mode="html",
        )
        return
    if not data.get("name_of_engineer"):
        await message.answer(
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {data['service']}\n"
            f"<b>–í—Ä–µ–º—è:</b> {data['start_time']} - {data['end_time']}\n"
            f"<b>–î–∞—Ç–∞:</b> {data['day']}.{str(determine_month(int(data['day']))).zfill(2)}\n"
            f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b> {price}\n\n"
            f'–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –∂–º–∏ "<i>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</i>"',
            reply_markup=keyboard,
            parse_mode="html",
        )
        return
    else:
        await message.answer(
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {data['service']}\n"
            f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä:</b> {data['name_of_engineer']}\n"
            f"<b>–í—Ä–µ–º—è:</b> {data['start_time']} - {data['end_time']}\n"
            f"<b>–î–∞—Ç–∞:</b> {data['day']}.{str(determine_month(int(data['day']))).zfill(2)}\n"
            f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b> {price}\n\n"
            f'–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –∂–º–∏ "<i>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</i>"',
            reply_markup=keyboard,
            parse_mode="html",
        )
        return


@logger.catch()
async def approvement_night_handler(message: Message, state: FSMContext) -> None:
    await state.update_data(day=message.text)
    keyboard = await approvement_keyboard()
    data = await state.get_data()
    price = await count_sum(data["service"], data["start_time"], data["end_time"])
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {data['service']}\n"
        f"<b>–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä:</b> {data['name_of_engineer']}\n"
        f"<b>–í—Ä–µ–º—è:</b> {data['start_time']} - {data['end_time']}\n"
        f"<b>–î–∞—Ç–∞:</b> {data['day']}.{str(determine_month(int(data['day']))).zfill(2)}\n"
        f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b> {price}\n\n"
        f'–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –∂–º–∏ "<i>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</i>"',
        reply_markup=keyboard,
        parse_mode="html",
    )
    await state.update_data(price=price)
    await state.set_state(Booking.end)


@logger.catch()
async def end(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    # logger.debug(str(data))
    # logger.debug(data)
    # logger.debug(type(data))
    keyboard = await pay_inline_keyboard(message.from_user.id, data)
    await message.answer(
        f"–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –ë—Ä–æ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã:\n\n"
        f"üí≥ {os.environ.get('DETAILS')}\n"
        f"üí¥ {int(int(data['price']) / 2)}‚ÇΩ\n"
        f"üìÜ  {data['day']}.{str(determine_month(int(data['day']))).zfill(2)}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏. –û–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç, –∏–Ω–∞—á–µ –æ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
    )
    number = await get_number(data["username"])
    await message.bot.send_message(
        chat_id=os.environ.get("CHAT_ID"),
        text=f"–ö–ª–∏–µ–Ω—Ç: @{data['username']}\n–ù–æ–º–µ—Ä: {number}\n–£—Å–ª—É–≥–∞: {data['service']}\n–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä: {data['name_of_engineer']}\n–î–∞—Ç–∞: {data['day']}.{str(determine_month(int(data['day']))).zfill(2)}\n–í—Ä–µ–º—è: {data['start_time']}-{data['end_time']}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']}",
        reply_markup=keyboard,
    )
    await state.set_state(Booking.waiting_for_pay)


@logger.catch()
async def waiting_for_pay(message: Message, state: FSMContext) -> None:
    pass


@logger.catch()
async def approve_handler(callback: CallbackQuery) -> None:
    logger.debug(f"Callback: {callback}")
    logger.debug(f"data: {callback.message.text} {type(callback.message.text)}")
    # text: str = callback.message.text.replace("'", '"')
    text: str = callback.data.split(";")[1]
    logger.debug(text)
    data = await find_temp(text)
    # data: Dict[str, Any] = json.loads(text)
    logger.debug(f"dict: {data} {type(data)}")
    await write_booking(data)
    logger.warning(f"data: {data.keys()}")
    # print(callback.message.text)
    await callback.answer(text="–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –±—Ä–æ–Ω—å")
    await callback.bot.send_message(
        callback.data.split(";")[0],
        f"–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['start_time']} - {data['end_time']}\n"
        f"–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä: {data['name_of_engineer']}\n"
        f"–ê–¥—Ä–µ—Å:  —É–ª. –ö–∞–∑–∞–Ω—Å–∫–∞—è 7–í, –ë–¶ –ö–∞–∑–∞–Ω—Å–∫–∏–π, –ø–æ–º. 616\n"
        f"–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–Ω–æ –Ω–µ –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ 12 —á–∞—Å–æ–≤ –¥–æ —Å–µ–∞–Ω—Å–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–∏—Å–∞—Ç—å @room616\n\n"
        f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ ROOM616!",
    )


@logger.catch()
async def back(message: Message, state: FSMContext) -> None:
    # await state.set_data({})
    await state.set_state(Start.booking)
    await start_booking_handler(message, state=state)
